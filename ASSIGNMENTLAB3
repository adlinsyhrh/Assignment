###############################################################
#                          WARNING!!!!                        #
# This is a sandbox environment. Using personal credentials   #
# is HIGHLY! discouraged. Any consequences of doing so are    #
# completely the user's responsibilites.                      #
#                                                             #
# The PWD team.                                               #
###############################################################
[node1] (local) root@192.168.0.8 ~
$ ###############################################################
#                          WARNING!!!!                        #
# This is a sandbox environment. Using personal credentials   #
# is HIGHLY! discouraged. Any consequences of doing so are    #
# completely the user's responsibilites.                      #
#                                                             #
# The PWD team.                                               #
###############################################################
[node1] (local) root@192.168.0.8 ~
$ git clone https://github.com/dvf/blockchain
Cloning into 'blockchain'...
remote: Enumerating objects: 301, done.
remote: Total 301 (delta 0), reused 0 (delta 0), pack-reused 301
Receiving objects: 100% (301/301), 108.59 KiB | 1.57 MiB/s, done.
Resolving deltas: 100% (145/145), done.
[node1] (local) root@192.168.0.8 ~
$ cd blockchain
[node1] (local) root@192.168.0.8 ~/blockchain
$ ls
Dockerfile        Pipfile.lock      csharp            tests
LICENSE           README.md         js
Pipfile           blockchain.py     requirements.txt
[node1] (local) root@192.168.0.8 ~/blockchain
$ vi requirements.txt
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker swarm init --advertise -addr $(hostname -i)
unknown flag: --advertise
See 'docker swarm init --help'.
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker swarm init --advertise-addr $(hostname -i)
Swarm initialized: current node (t3xk6dsimpv6j1eirbzobr5zy) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-2wmqrqr7tgwi32qy9o2a91asrgy14xlz0qhnq8yyjt6lwmrg1d-3yzgdqyxvstslwnj2f0shbjth 192.168.0.8:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and followthe instructions.

[node1] (local) root@192.168.0.8 ~/blockchain
$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
t3xk6dsimpv6j1eirbzobr5zy *   node1               Ready               Active         Leader              19.03.4
4nokpzxkfocexxsltjlfdqnqu     node2               Ready               Active                             19.03.4
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker image build -t blockchain
"docker image build" requires exactly 1 argument.
See 'docker image build --help'.

Usage:  docker image build [OPTIONS] PATH | URL | -

Build an image from a Dockerfile
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker image build -t blockchain .
Sending build context to Docker daemon  344.1kB
Step 1/7 : FROM python:3.6-alpine
3.6-alpine: Pulling from library/python
aad63a933944: Pull complete
f229563217f5: Pull complete
bce07ec39263: Pull complete
7fd926f0f7cc: Pull complete
075e2aee5115: Pull complete
Digest: sha256:406e2295248a078fee8ef872640ffd3b534c06fa192cd4e7d37e253665e127ea
Status: Downloaded newer image for python:3.6-alpine
 ---> 5e7f84829665
Step 2/7 : WORKDIR /app
 ---> Running in 22f210383e31
Removing intermediate container 22f210383e31
 ---> 79de069018a8
Step 3/7 : ADD requirements.txt /app
 ---> c58ecccabd7b
Step 4/7 : RUN cd /app &&     pip install -r requirements.txt
 ---> Running in d50112a6cb44
Collecting flask==1.1.1
  Downloading Flask-1.1.1-py2.py3-none-any.whl (94 kB)
Collecting requests==2.23.0
  Downloading requests-2.23.0-py2.py3-none-any.whl (58 kB)
Collecting Werkzeug>=0.15
  Downloading Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
Collecting click>=5.1
  Downloading click-7.1.1-py2.py3-none-any.whl (82 kB)
Collecting Jinja2>=2.10.1
  Downloading Jinja2-2.11.1-py2.py3-none-any.whl (126 kB)
Collecting itsdangerous>=0.24
  Downloading itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting certifi>=2017.4.17
  Downloading certifi-2020.4.5.1-py2.py3-none-any.whl (157 kB)
Collecting idna<3,>=2.5
  Downloading idna-2.9-py2.py3-none-any.whl (58 kB)
Collecting chardet<4,>=3.0.2
  Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1
  Downloading urllib3-1.25.8-py2.py3-none-any.whl (125 kB)
Collecting MarkupSafe>=0.23
  Downloading MarkupSafe-1.1.1.tar.gz (19 kB)
Building wheels for collected packages: MarkupSafe
  Building wheel for MarkupSafe (setup.py): started
  Building wheel for MarkupSafe (setup.py): finished with status 'done'
  Created wheel for MarkupSafe: filename=MarkupSafe-1.1.1-py3-none-any.whl size=12629 sha256=e2a1ef44662d3f8f411cc03d6022ad1d5244df45a1bb0552ebbc42c2685dd51e
  Stored in directory: /root/.cache/pip/wheels/ca/85/2f/4c3a8ca6fb5eec7b43ec1e5666c7274dcdb86d6c32231aaa9d
Successfully built MarkupSafe
Installing collected packages: Werkzeug, click, MarkupSafe, Jinja2, itsdangerous, flask, certifi, idna, chardet, urllib3, requests
Successfully installed Jinja2-2.11.1 MarkupSafe-1.1.1 Werkzeug-1.0.1 certifi-2020.4.5.1 chardet-3.0.4 click-7.1.1 flask-1.1.1 idna-2.9 itsdangerous-1.1.0 requests-2.23.0 urllib3-1.25.8
Removing intermediate container d50112a6cb44
 ---> 39479d1746bf
Step 5/7 : ADD blockchain.py /app
 ---> 6a358e8a8fe2
Step 6/7 : EXPOSE 5000
 ---> Running in fe58e6514fac
Removing intermediate container fe58e6514fac
 ---> c86ade269d8d
Step 7/7 : CMD ["python", "blockchain.py", "--port", "5000"]
 ---> Running in 5b650009c1ff
Removing intermediate container 5b650009c1ff
 ---> 5c4e8c2108d1
Successfully built 5c4e8c2108d1
Successfully tagged blockchain:latest
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
blockchain          latest              5c4e8c2108d1        8 minutes ago       106MB
python              3.6-alpine          5e7f84829665        13 days ago         92.5MB
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker run- d -p 80:5000 blockchain
unknown shorthand flag: 'p' in -p
See 'docker --help'.

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "/root/.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default
                           "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  app*        Docker Application (Docker Inc., v0.8.0)
  builder     Manage builds
  checkpoint  Manage checkpoints
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  engine      Manage the docker engine
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  deploy      Deploy a new stack or update an existing stack
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

[node1] (local) root@192.168.0.8 ~/blockchain
$ docker container ls -all
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker run -d -p 80:5000 blockchain
e699ea20bd89a422db47c5305b00ab5d57a08ec8cd1089894643766cae2d67e7
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker container ls -all
CONTAINER ID        IMAGE               COMMAND                  CREATED    STATUS              PORTS                  NAMES
e699ea20bd89        blockchain          "python blockchain.p…"   9 seconds ago    Up 5 seconds        0.0.0.0:80->5000/tcp   nifty_yonath
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service create --name nifty_yonath blockchain:latest
image blockchain:latest could not be accessed on a registry to record
its digest. Each node will access blockchain:latest independently,
possibly leading to different nodes running different
versions of the image.

n9d6a8vevj0btc75g95yizl3j
overall progress: 1 out of 1 tasks
1/1: running
verify: Service converged
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service create --name hungry_bohr blockchain:latest
image blockchain:latest could not be accessed on a registry to record
its digest. Each node will access blockchain:latest independently,
possibly leading to different nodes running different
versions of the image.

zfvugrb33fu2d64oes3q8lsao
overall progress: 1 out of 1 tasks
1/1: running
verify: Service converged
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
zfvugrb33fu2        hungry_bohr         replicated          1/1                 blockchain:latest
n9d6a8vevj0b        nifty_yonath        replicated          1/1                 blockchain:latest
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service scale nifty_yonath=3
nifty_yonath scaled to 3
overall progress: 3 out of 3 tasks
1/3: running
2/3: running
3/3: running
verify: Service converged
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service scale hungry_bohr=3
hungry_bohr scaled to 3
overall progress: 3 out of 3 tasks
1/3: running
2/3: running
3/3: running
verify: Service converged
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service ps nifty_yonath
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
ldaux6sajm1c        nifty_yonath.1      blockchain:latest   node1               Running             Running 7 minutes ago
86lu5jhv8vyc        nifty_yonath.2      blockchain:latest   node2               Running             Running about a minute ago
8mfd1j77d822        nifty_yonath.3      blockchain:latest   node1               Running             Running about a minute ago
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service ps hungry_bohr
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
iz94r0usnhf2        hungry_bohr.1       blockchain:latest   node2               Running             Running 3 minutes ago
2rhf22o4qqj0        hungry_bohr.2       blockchain:latest   node1               Running             Running about a minute ago
qlth6etrzzk5        hungry_bohr.3       blockchain:latest   node2               Running             Running about a minute ago
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
zfvugrb33fu2        hungry_bohr         replicated          3/3                 blockchain:latest
n9d6a8vevj0b        nifty_yonath        replicated          3/3                 blockchain:latest
[node1] (local) root@192.168.0.8 ~/blockchain
$ 2~###############################################################
#                          WARNING!!!!                        #
# This is a sandbox environment. Using personal credentials   #
# is HIGHLY! discouraged. Any consequences of doing so are    #
# completely the user's responsibilites.                      #
#                                                             #
# The PWD team.                                               #
###############################################################
[node1] (local) root@192.168.0.8 ~
$ git clone https://github.com/dvf/blockchain
Cloning into 'blockchain'...
remote: Enumerating objects: 301, done.
remote: Total 301 (delta 0), reused 0 (delta 0), pack-reused 301
Receiving objects: 100% (301/301), 108.59 KiB | 1.57 MiB/s, done.
Resolving deltas: 100% (145/145), done.
[node1] (local) root@192.168.0.8 ~
$ cd blockchain
[node1] (local) root@192.168.0.8 ~/blockchain
$ ls
Dockerfile        Pipfile.lock      csharp            tests
LICENSE           README.md         js
Pipfile           blockchain.py     requirements.txt
[node1] (local) root@192.168.0.8 ~/blockchain
$ vi requirements.txt
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker swarm init --advertise -addr $(hostname -i)
unknown flag: --advertise
See 'docker swarm init --help'.
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker swarm init --advertise-addr $(hostname -i)
Swarm initialized: current node (t3xk6dsimpv6j1eirbzobr5zy) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-2wmqrqr7tgwi32qy9o2a91asrgy14xlz0qhnq8yyjt6lwmrg1d-3yzgdqyxvstslwnj2f0shbjth 192.168.0.8:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and followthe instructions.

[node1] (local) root@192.168.0.8 ~/blockchain
$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
t3xk6dsimpv6j1eirbzobr5zy *   node1               Ready               Active         Leader              19.03.4
4nokpzxkfocexxsltjlfdqnqu     node2               Ready               Active                             19.03.4
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker image build -t blockchain
"docker image build" requires exactly 1 argument.
See 'docker image build --help'.

Usage:  docker image build [OPTIONS] PATH | URL | -

Build an image from a Dockerfile
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker image build -t blockchain .
Sending build context to Docker daemon  344.1kB
Step 1/7 : FROM python:3.6-alpine
3.6-alpine: Pulling from library/python
aad63a933944: Pull complete
f229563217f5: Pull complete
bce07ec39263: Pull complete
7fd926f0f7cc: Pull complete
075e2aee5115: Pull complete
Digest: sha256:406e2295248a078fee8ef872640ffd3b534c06fa192cd4e7d37e253665e127ea
Status: Downloaded newer image for python:3.6-alpine
 ---> 5e7f84829665
Step 2/7 : WORKDIR /app
 ---> Running in 22f210383e31
Removing intermediate container 22f210383e31
 ---> 79de069018a8
Step 3/7 : ADD requirements.txt /app
 ---> c58ecccabd7b
Step 4/7 : RUN cd /app &&     pip install -r requirements.txt
 ---> Running in d50112a6cb44
Collecting flask==1.1.1
  Downloading Flask-1.1.1-py2.py3-none-any.whl (94 kB)
Collecting requests==2.23.0
  Downloading requests-2.23.0-py2.py3-none-any.whl (58 kB)
Collecting Werkzeug>=0.15
  Downloading Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
Collecting click>=5.1
  Downloading click-7.1.1-py2.py3-none-any.whl (82 kB)
Collecting Jinja2>=2.10.1
  Downloading Jinja2-2.11.1-py2.py3-none-any.whl (126 kB)
Collecting itsdangerous>=0.24
  Downloading itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting certifi>=2017.4.17
  Downloading certifi-2020.4.5.1-py2.py3-none-any.whl (157 kB)
Collecting idna<3,>=2.5
  Downloading idna-2.9-py2.py3-none-any.whl (58 kB)
Collecting chardet<4,>=3.0.2
  Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1
  Downloading urllib3-1.25.8-py2.py3-none-any.whl (125 kB)
Collecting MarkupSafe>=0.23
  Downloading MarkupSafe-1.1.1.tar.gz (19 kB)
Building wheels for collected packages: MarkupSafe
  Building wheel for MarkupSafe (setup.py): started
  Building wheel for MarkupSafe (setup.py): finished with status 'done'
  Created wheel for MarkupSafe: filename=MarkupSafe-1.1.1-py3-none-any.whl size=12629 sha256=e2a1ef44662d3f8f411cc03d6022ad1d5244df45a1bb0552ebbc42c2685dd51e
  Stored in directory: /root/.cache/pip/wheels/ca/85/2f/4c3a8ca6fb5eec7b43ec1e5666c7274dcdb86d6c32231aaa9d
Successfully built MarkupSafe
Installing collected packages: Werkzeug, click, MarkupSafe, Jinja2, itsdangerous, flask, certifi, idna, chardet, urllib3, requests
Successfully installed Jinja2-2.11.1 MarkupSafe-1.1.1 Werkzeug-1.0.1 certifi-2020.4.5.1 chardet-3.0.4 click-7.1.1 flask-1.1.1 idna-2.9 itsdangerous-1.1.0 requests-2.23.0 urllib3-1.25.8
Removing intermediate container d50112a6cb44
 ---> 39479d1746bf
Step 5/7 : ADD blockchain.py /app
 ---> 6a358e8a8fe2
Step 6/7 : EXPOSE 5000
 ---> Running in fe58e6514fac
Removing intermediate container fe58e6514fac
 ---> c86ade269d8d
Step 7/7 : CMD ["python", "blockchain.py", "--port", "5000"]
 ---> Running in 5b650009c1ff
Removing intermediate container 5b650009c1ff
 ---> 5c4e8c2108d1
Successfully built 5c4e8c2108d1
Successfully tagged blockchain:latest
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
blockchain          latest              5c4e8c2108d1        8 minutes ago       106MB
python              3.6-alpine          5e7f84829665        13 days ago         92.5MB
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker run- d -p 80:5000 blockchain
unknown shorthand flag: 'p' in -p
See 'docker --help'.

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "/root/.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default
                           "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  app*        Docker Application (Docker Inc., v0.8.0)
  builder     Manage builds
  checkpoint  Manage checkpoints
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  engine      Manage the docker engine
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  deploy      Deploy a new stack or update an existing stack
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

[node1] (local) root@192.168.0.8 ~/blockchain
$ docker container ls -all
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker run -d -p 80:5000 blockchain
e699ea20bd89a422db47c5305b00ab5d57a08ec8cd1089894643766cae2d67e7
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker container ls -all
CONTAINER ID        IMAGE               COMMAND                  CREATED    STATUS              PORTS                  NAMES
e699ea20bd89        blockchain          "python blockchain.p…"   9 seconds ago    Up 5 seconds        0.0.0.0:80->5000/tcp   nifty_yonath
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service create --name nifty_yonath blockchain:latest
image blockchain:latest could not be accessed on a registry to record
its digest. Each node will access blockchain:latest independently,
possibly leading to different nodes running different
versions of the image.

n9d6a8vevj0btc75g95yizl3j
overall progress: 1 out of 1 tasks
1/1: running
verify: Service converged
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service create --name hungry_bohr blockchain:latest
image blockchain:latest could not be accessed on a registry to record
its digest. Each node will access blockchain:latest independently,
possibly leading to different nodes running different
versions of the image.

zfvugrb33fu2d64oes3q8lsao
overall progress: 1 out of 1 tasks
1/1: running
verify: Service converged
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
zfvugrb33fu2        hungry_bohr         replicated          1/1                 blockchain:latest
n9d6a8vevj0b        nifty_yonath        replicated          1/1                 blockchain:latest
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service scale nifty_yonath=3
nifty_yonath scaled to 3
overall progress: 3 out of 3 tasks
1/3: running
2/3: running
3/3: running
verify: Service converged
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service scale hungry_bohr=3
hungry_bohr scaled to 3
overall progress: 3 out of 3 tasks
1/3: running
2/3: running
3/3: running
verify: Service converged
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service ps nifty_yonath
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
ldaux6sajm1c        nifty_yonath.1      blockchain:latest   node1               Running             Running 7 minutes ago
86lu5jhv8vyc        nifty_yonath.2      blockchain:latest   node2               Running             Running about a minute ago
8mfd1j77d822        nifty_yonath.3      blockchain:latest   node1               Running             Running about a minute ago
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service ps hungry_bohr
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
iz94r0usnhf2        hungry_bohr.1       blockchain:latest   node2               Running             Running 3 minutes ago
2rhf22o4qqj0        hungry_bohr.2       blockchain:latest   node1               Running             Running about a minute ago
qlth6etrzzk5        hungry_bohr.3       blockchain:latest   node2               Running             Running about a minute ago
[node1] (local) root@192.168.0.8 ~/blockchain
$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
zfvugrb33fu2        hungry_bohr         replicated          3/3                 blockchain:latest
n9d6a8vevj0b        nifty_yonath        replicated          3/3                 blockchain:latest
###############################################################
#                          WARNING!!!!                        #
# This is a sandbox environment. Using personal credentials   #
# is HIGHLY! discouraged. Any consequences of doing so are    #
# completely the user's responsibilites.                      #
#                                                             #
# The PWD team.                                               #
###############################################################
[node2] (local) root@192.168.0.7 ~
$ ###############################################################
#                          WARNING!!!!                        #
# This is a sandbox environment. Using personal credentials   #
# is HIGHLY! discouraged. Any consequences of doing so are    #
# completely the user's responsibilites.                      #
#                                                             #
# The PWD team.                                               #
###############################################################
[node2] (local) root@192.168.0.7 ~
$ docker swarm join --token SWMTKN-1-2wmqrqr7tgwi32qy9o2a91asrgy14xlz0qhnq8yyjt6lwmrg1d-3yzgdqyxvstslwnj2f0shbjth 192.168.0.8:2377
This node joined a swarm as a worker.
[node2] (local) root@192.168.0.7 ~
$ git clone https://github.com/dvf/blockchain
Cloning into 'blockchain'...
remote: Enumerating objects: 301, done.
remote: Total 301 (delta 0), reused 0 (delta 0), pack-reused 301
Receiving objects: 100% (301/301), 108.59 KiB | 1.34 MiB/s, done.
Resolving deltas: 100% (145/145), done.
[node2] (local) root@192.168.0.7 ~
$ vi requirements.txt
[node2] (local) root@192.168.0.7 ~
$ cd blockchain
[node2] (local) root@192.168.0.7 ~/blockchain
$ vi requirements.txt
[node2] (local) root@192.168.0.7 ~/blockchain
$ docker image build -t blockchain .
Sending build context to Docker daemon  344.1kB
Step 1/7 : FROM python:3.6-alpine
3.6-alpine: Pulling from library/python
aad63a933944: Pull complete
f229563217f5: Pull complete
bce07ec39263: Pull complete
7fd926f0f7cc: Pull complete
075e2aee5115: Pull complete
Digest: sha256:406e2295248a078fee8ef872640ffd3b534c06fa192cd4e7d37e253665e127ea
Status: Downloaded newer image for python:3.6-alpine
 ---> 5e7f84829665
Step 2/7 : WORKDIR /app
 ---> Running in a9ebba5b3dcc
Removing intermediate container a9ebba5b3dcc
 ---> 3127af4c264b
Step 3/7 : ADD requirements.txt /app
 ---> d893771bf491
Step 4/7 : RUN cd /app &&     pip install -r requirements.txt
 ---> Running in d26870de3ce2
Collecting flask==1.1.1
  Downloading Flask-1.1.1-py2.py3-none-any.whl (94 kB)
Collecting requests==2.23.0
  Downloading requests-2.23.0-py2.py3-none-any.whl (58 kB)
Collecting itsdangerous>=0.24
  Downloading itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting Jinja2>=2.10.1
  Downloading Jinja2-2.11.1-py2.py3-none-any.whl (126 kB)
Collecting click>=5.1
  Downloading click-7.1.1-py2.py3-none-any.whl (82 kB)
Collecting Werkzeug>=0.15
  Downloading Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1
  Downloading urllib3-1.25.8-py2.py3-none-any.whl (125 kB)
Collecting certifi>=2017.4.17
  Downloading certifi-2020.4.5.1-py2.py3-none-any.whl (157 kB)
Collecting chardet<4,>=3.0.2
  Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)
Collecting idna<3,>=2.5
  Downloading idna-2.9-py2.py3-none-any.whl (58 kB)
Collecting MarkupSafe>=0.23
  Downloading MarkupSafe-1.1.1.tar.gz (19 kB)
Building wheels for collected packages: MarkupSafe
  Building wheel for MarkupSafe (setup.py): started
  Building wheel for MarkupSafe (setup.py): finished with status 'done'
  Created wheel for MarkupSafe: filename=MarkupSafe-1.1.1-py3-none-any.whl size=12629 sha256=324ed58cce59a0576bf119dd90f1364c3cf553e43fd1b057282ea29bf318b1ad
  Stored in directory: /root/.cache/pip/wheels/ca/85/2f/4c3a8ca6fb5eec7b43ec1e5666c7274dcdb86d6c32231aaa9d
Successfully built MarkupSafe
Installing collected packages: itsdangerous, MarkupSafe, Jinja2, click, Werkzeug, flask, urllib3, certifi, chardet, idna, requests
Successfully installed Jinja2-2.11.1 MarkupSafe-1.1.1 Werkzeug-1.0.1 certifi-2020.4.5.1 chardet-3.0.4 click-7.1.1 flask-1.1.1 idna-2.9 itsdangerous-1.1.0 requests-2.23.0 urllib3-1.25.8
Removing intermediate container d26870de3ce2
 ---> d3e7647d65f0
Step 5/7 : ADD blockchain.py /app
 ---> 662cd554894d
Step 6/7 : EXPOSE 5000
 ---> Running in c87c7d99ac9a
Removing intermediate container c87c7d99ac9a
 ---> 62b87d6e9f43
Step 7/7 : CMD ["python", "blockchain.py", "--port", "5000"]
 ---> Running in 584392b2d848
Removing intermediate container 584392b2d848
 ---> a46a93ca0b17
Successfully built a46a93ca0b17
Successfully tagged blockchain:latest
[node2] (local) root@192.168.0.7 ~/blockchain
$ docker run -d -p 80:5000 blockchain
4f0a9ed80289cc5e333a163552297cec102ffacc170de53e7b06240f4fc795b2
[node2] (local) root@192.168.0.7 ~/blockchain
$ docker container ls -all
CONTAINER ID        IMAGE               COMMAND                  CREATED    STATUS              PORTS                  NAMES
4f0a9ed80289        blockchain          "python blockchain.p…"   39 seconds ago    Up 38 seconds       0.0.0.0:80->5000/tcp   hungry_bohr
[node2] (local) root@192.168.0.7 ~/blockchain
$ docker service create --name hungry_bohr blockchain:latest
Error response from daemon: This node is not a swarm manager. Worker nodes can'tbe used to view or modify cluster state. Please run this command on a manager node or promote the current node to a manager.
[node2] (local) root@192.168.0.7 ~/blockchain
$ ;2~###############################################################
#                          WARNING!!!!                        #
# This is a sandbox environment. Using personal credentials   #
# is HIGHLY! discouraged. Any consequences of doing so are    #
# completely the user's responsibilites.                      #
#                                                             #
# The PWD team.                                               #
###############################################################
[node2] (local) root@192.168.0.7 ~
$ docker swarm join --token SWMTKN-1-2wmqrqr7tgwi32qy9o2a91asrgy14xlz0qhnq8yyjt6lwmrg1d-3yzgdqyxvstslwnj2f0shbjth 192.168.0.8:2377
This node joined a swarm as a worker.
[node2] (local) root@192.168.0.7 ~
$ git clone https://github.com/dvf/blockchain
Cloning into 'blockchain'...
remote: Enumerating objects: 301, done.
remote: Total 301 (delta 0), reused 0 (delta 0), pack-reused 301
Receiving objects: 100% (301/301), 108.59 KiB | 1.34 MiB/s, done.
Resolving deltas: 100% (145/145), done.
[node2] (local) root@192.168.0.7 ~
$ vi requirements.txt
[node2] (local) root@192.168.0.7 ~
$ cd blockchain
[node2] (local) root@192.168.0.7 ~/blockchain
$ vi requirements.txt
[node2] (local) root@192.168.0.7 ~/blockchain
$ docker image build -t blockchain .
Sending build context to Docker daemon  344.1kB
Step 1/7 : FROM python:3.6-alpine
3.6-alpine: Pulling from library/python
aad63a933944: Pull complete
f229563217f5: Pull complete
bce07ec39263: Pull complete
7fd926f0f7cc: Pull complete
075e2aee5115: Pull complete
Digest: sha256:406e2295248a078fee8ef872640ffd3b534c06fa192cd4e7d37e253665e127ea
Status: Downloaded newer image for python:3.6-alpine
 ---> 5e7f84829665
Step 2/7 : WORKDIR /app
 ---> Running in a9ebba5b3dcc
Removing intermediate container a9ebba5b3dcc
 ---> 3127af4c264b
Step 3/7 : ADD requirements.txt /app
 ---> d893771bf491
Step 4/7 : RUN cd /app &&     pip install -r requirements.txt
 ---> Running in d26870de3ce2
Collecting flask==1.1.1
  Downloading Flask-1.1.1-py2.py3-none-any.whl (94 kB)
Collecting requests==2.23.0
  Downloading requests-2.23.0-py2.py3-none-any.whl (58 kB)
Collecting itsdangerous>=0.24
  Downloading itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting Jinja2>=2.10.1
  Downloading Jinja2-2.11.1-py2.py3-none-any.whl (126 kB)
Collecting click>=5.1
  Downloading click-7.1.1-py2.py3-none-any.whl (82 kB)
Collecting Werkzeug>=0.15
  Downloading Werkzeug-1.0.1-py2.py3-none-any.whl (298 kB)
Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1
  Downloading urllib3-1.25.8-py2.py3-none-any.whl (125 kB)
Collecting certifi>=2017.4.17
  Downloading certifi-2020.4.5.1-py2.py3-none-any.whl (157 kB)
Collecting chardet<4,>=3.0.2
  Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)
Collecting idna<3,>=2.5
  Downloading idna-2.9-py2.py3-none-any.whl (58 kB)
Collecting MarkupSafe>=0.23
  Downloading MarkupSafe-1.1.1.tar.gz (19 kB)
Building wheels for collected packages: MarkupSafe
  Building wheel for MarkupSafe (setup.py): started
  Building wheel for MarkupSafe (setup.py): finished with status 'done'
  Created wheel for MarkupSafe: filename=MarkupSafe-1.1.1-py3-none-any.whl size=12629 sha256=324ed58cce59a0576bf119dd90f1364c3cf553e43fd1b057282ea29bf318b1ad
  Stored in directory: /root/.cache/pip/wheels/ca/85/2f/4c3a8ca6fb5eec7b43ec1e5666c7274dcdb86d6c32231aaa9d
Successfully built MarkupSafe
Installing collected packages: itsdangerous, MarkupSafe, Jinja2, click, Werkzeug, flask, urllib3, certifi, chardet, idna, requests
Successfully installed Jinja2-2.11.1 MarkupSafe-1.1.1 Werkzeug-1.0.1 certifi-2020.4.5.1 chardet-3.0.4 click-7.1.1 flask-1.1.1 idna-2.9 itsdangerous-1.1.0 requests-2.23.0 urllib3-1.25.8
Removing intermediate container d26870de3ce2
 ---> d3e7647d65f0
Step 5/7 : ADD blockchain.py /app
 ---> 662cd554894d
Step 6/7 : EXPOSE 5000
 ---> Running in c87c7d99ac9a
Removing intermediate container c87c7d99ac9a
 ---> 62b87d6e9f43
Step 7/7 : CMD ["python", "blockchain.py", "--port", "5000"]
 ---> Running in 584392b2d848
Removing intermediate container 584392b2d848
 ---> a46a93ca0b17
Successfully built a46a93ca0b17
Successfully tagged blockchain:latest
[node2] (local) root@192.168.0.7 ~/blockchain
$ docker run -d -p 80:5000 blockchain
4f0a9ed80289cc5e333a163552297cec102ffacc170de53e7b06240f4fc795b2
[node2] (local) root@192.168.0.7 ~/blockchain
$ docker container ls -all
CONTAINER ID        IMAGE               COMMAND                  CREATED    STATUS              PORTS                  NAMES
4f0a9ed80289        blockchain          "python blockchain.p…"   39 seconds ago    Up 38 seconds       0.0.0.0:80->5000/tcp   hungry_bohr
[node2] (local) root@192.168.0.7 ~/blockchain
$ docker service create --name hungry_bohr blockchain:latest
Error response from daemon: This node is not a swarm manager. Worker nodes can'tbe used to view or modify cluster state. Please run this command on a manager node or promote the current node to a manager.
[node2] (local) root@192.168.0.7 ~/blockchain
